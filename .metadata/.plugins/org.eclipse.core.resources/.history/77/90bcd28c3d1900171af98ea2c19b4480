package com.study.sample.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.locks.ReentrantLock;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.core.Logger;

import com.study.sample.util.DatabaseConfigManager;

public class ConnectionManager <T extends Connection> {
	private static Connection connection;
	private static Logger logger = LogManager.getLogger(ConnectionManager.class);
	private static final ConnectionManager instance = new ConnectionManager(OracleConnection.class);
	private BlockingQueue<T> freePool;
	private static final ReentrantLock lock = new ReentrantLock();
	
	private ConnectionManager(Class<T> clazz){
		freePool = new ArrayBlockingQueue<T>(5);
		for (int i=0;i<5;i++){
			T conn;
			try {
				conn = clazz.newInstance();
			} catch (InstantiationException | IllegalAccessException e) {
				logger.log(Level.ERROR, "Cannot create connection " + e.getLocalizedMessage());
			}
			freePool.offer(conn);
		}
	}
	public static Connection getConnection(){
		try {
			lock.lock();
			if (connection == null){
			try {
				connection = DriverManager.getConnection(DatabaseConfigManager.getProperty("db.url"), 
														DatabaseConfigManager.getProperty("dbuser.name"), 
														DatabaseConfigManager.getProperty("dbuser.password"));
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		}finally {
			lock.unlock();
				}
		return connection;
	}
}
